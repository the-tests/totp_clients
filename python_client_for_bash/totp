#!/usr/bin/python3

import pyotp
import json
from os import path
from sys import exit

from time import sleep, time

FILE_PATH = '~/.config/.keys.json'
DEFAULT_INTERVAL = 30
DEFAULT_DIGITS = 6
LINE_UP = '\033[1A'
LINE_CLEAR = '\x1b[2K'

# colors
RED = '\033[91m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
DEFAULT = '\033[0m'

with open(path.expanduser(FILE_PATH) if FILE_PATH.startswith('~') else FILE_PATH, 'rb') as f:
  entities = json.load(f)

def colorful_print(name: str, totp_value: str, interval: int) -> None:
  last = interval - int(time()) % interval

  if (interval - last) / interval > 0.7:
    color = RED
  elif (interval - last) / interval > 0.4:
    color = YELLOW
  else:
    color = GREEN

  last_bar = (
    color +
    '=' * last +
    '_' * (int(time()) % interval) +
    DEFAULT
  )
  print('  ', name, totp_value, '|' + last_bar + '|')

def get_totp(secret, digits, interval):
  totp = pyotp.TOTP(secret)
  totp.digits = digits
  totp.interval = interval
  return totp.now()

print()
try:
  while True:
    for entity in entities:
      if not entity.get("secret"):
        print(f"<secret> should be set for <{entity.get('name', 'noName')}>")
        continue
      colorful_print(
        entity.get("name", "noName"),
        get_totp(entity["secret"], entity.get("digits", DEFAULT_DIGITS), entity.get("interval", DEFAULT_INTERVAL)),
        entity.get("interval", DEFAULT_INTERVAL)
      )
    print()
    sleep(1)
    print(LINE_UP * (len(entities) + 1), end=LINE_CLEAR)
except KeyboardInterrupt:
  print()
  exit(0)
